datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id         String      @id @default(uuid())
  name String

}

model Product {
  id         String      @id @default(uuid())
  name       String
  category   Category
  flavors    Flavor[]
  sizes      Size[]
  orderItems OrderItem[]
  imageUrl   String?
  createdAt  DateTime    @default(now())
}

model Flavor {
  id           String           @id @default(uuid())
  name         String
  product      Product          @relation(fields: [productId], references: [id])
  productId    String
  orderItems   OrderItem[]
  createdAt    DateTime         @default(now())

  @@unique([name, productId])
}

model Size {
  id           String           @id @default(uuid())
  name         String
  price        Float
  product      Product          @relation(fields: [productId], references: [id])
  productId    String
  orderItems   OrderItem[]
  materials    SizeMaterial[]
  ingredients  SizeIngredient[]
  createdAt    DateTime         @default(now())

  @@unique([name, productId])
}

model SizeIngredient {
  id           String     @id @default(uuid())
  size         Size       @relation(fields: [sizeId], references: [id])
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  quantityUsed Float
  sizeId       String
  ingredientId String
}

model SizeMaterial {
  id           String   @id @default(uuid())
  size         Size     @relation(fields: [sizeId], references: [id])
  material     Material @relation(fields: [materialId], references: [id])
  quantityUsed Float
  sizeId       String
  materialId   String
}

enum Category {
  InsideMeals
  OutsideSnacks
  InsideBeverages
}

model Addon {
  id        String   @id @default(uuid())
  name      String
  price     Float
  stock     Stock?
  createdAt           DateTime @default(now())
  orderItemAddons OrderItemAddon[]
}

model Ingredient {
  id                  String   @id @default(uuid())
  name                String
  measurementUnit     String
  unitsPerPurchase    Float?
  pricePerPurchase    Float
  pricePerUnit        Float
  stock               Stock?
  createdAt           DateTime @default(now())
  sizes               SizeIngredient[]
}

model Material {
  id               String   @id @default(uuid())
  name             String
  pricePerPiece    Float
  isPackage        Boolean  @default(false)
  packagePrice     Float?
  unitsPerPackage  Int?
  stock            Stock?
  createdAt        DateTime @default(now())
  sizes            SizeMaterial[]
}

model Stock {
  id           String     @id @default(uuid())
  quantity     Float
  addon        Addon?     @relation(fields: [addonId], references: [id])
  ingredient   Ingredient?@relation(fields: [ingredientId], references: [id])
  material     Material?  @relation(fields: [materialId], references: [id])
  addonId      String?    @unique
  ingredientId String?    @unique
  materialId   String?    @unique
}

model Order {
  id        String       @id @default(uuid())
  items     OrderItem[]
  total     Float
  paid      Float
  change    Float
  createdAt DateTime     @default(now())
  receipt   Receipt?
  orderType   OrderType  @default(DINE_IN)
  orderStatus OrderStatus  @default(QUEUING)
}

model OrderItem {
  id        String    @id @default(uuid())
  order     Order     @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product   @relation(fields: [productId], references: [id])
  productId String
  flavor    Flavor    @relation(fields: [flavorId], references: [id])
  flavorId  String
  size      Size      @relation(fields: [sizeId], references: [id])
  sizeId    String
  quantity  Int
  addons    OrderItemAddon[]
}

model OrderItemAddon {
  id          String  @id @default(uuid())
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id])
  orderItemId String
  addon       Addon   @relation(fields: [addonId], references: [id])
  addonId     String
  quantity    Int
}

model Receipt {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String   @unique
  content   Json
  createdAt DateTime @default(now())
}

enum OrderType {
  DINE_IN
  TAKE_OUT
}

enum OrderStatus {
  QUEUING
  SERVED
  CANCELLED
}
